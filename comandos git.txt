
pwd: muestra la capeta raiz
cd: permite la navegacion entre carpetas cd.(directorio actual)cd..(regresa directorio anterior)
mkdir: crea una carpeta (mkdir proyecto1)
rm: elimina archivos ojo con este comando
touch: permite crear archivos de diferentes extenciones (vacio.txt)
cat: permite mostrar el contenido de un archivo
ls: muestra los archivos o lista de carpetas dentro de un directorio
ls-al: muestra los archivos y capetas dentro de un directorio incluso las ocultas
ls-l: muestra solo las carpetas pero no las ocultas.
history: muestra historial de comandos
!+numero: ejecuta el numero de la linea de comando
clear:limpia la consola.
git status: estado de archivos




para obtener ayuda sobre un comando solo se debe digitar ej: clear --help o cat --help

git init: se crea un archivo en memoria ram para el archivo que se llama staging y tambien una capeta de repositorio donde se van a alojar todos los cambios de un archivo
git add: permite pasar de un achivo untracked a tracked es decir un archivo normal lo pasa a staging donde ya se comienza a observar el archivo
git commit -m: el archivo se va al repositorio

master:ciclo de archivos iniciales de inicio a fin/head
development/experimentos:experimentos que se quieren realizar con alguna version del master 
hotfix or bugfix:se utiliza para corregir heads or versiones finales o unir versiones parciales con head

git config -l: para configurar nombre e email y otras funciones de usuario

git log: muestra historial de cambios al archivo

git checkout+codigo: devuelve archivo a version anterior

git master: version final oficial

git diff version a version b: muestra la diferencia entre versiones

git reset version soft: resetea a un estado anterior pero se guarda en stage

git reset version hard: resetea a un estado anterior y no se guarda.

git log --stat: explica las lineas que se cambiaron brevemente

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Repositorio remoto

Se utiliza para cuando se esta trabajando en grupo asi que todo se ha guardado en un servidor 

git clone url: trae una copia del servidor al directorio donde estas trabajando y guarda un repositorio del mismo archivo
git push: envia ultimo cambio del archivo al servidor  
git fetch: trae una version de archivo que se haya cambiado en el servidor y la guarda en el repositorio local
git merge: para llevar los archivos traidos del git fetch al directorio de trabajo.
git pull: trae los archivos cambiados por compa√±eros y los guarda en el directorio local y repositorrio local

/e/abel-documentos/bturabo/platzi/github/proyecto1 
Q: para salir de la cadena de git log
ESC+Shift+ZZ: para salir de la consola de comandos cuando no se hace un buen commit o merge
-------------------------------------------------------------------------------------------------------------------------------------------

GITHUB

Se crea una cuenta en github y le damos crear nuevo repositorio
Siempre se debe crear el archivo readme.md

git remote add origin + direccion https: Se digita en la consola para agregar un directorio remoto a nuestros archivos
Git remote: muestra si tenemos un acceso remoto con la parabra origin
git remote -v: nos muestra el origin de forma verbal lo cual es la direccion https://
git push origin master: Envia la rama master al servidor de github (generalmente abre consola de login para github)
git pull origin master --allow-unrelated-histories: se utiliza en dado caso que no se puedan fusionar las versiones del servidor y la real de git
-----------------------------------------------------------------------------------------------------------------------------------------------
Creacion de llave publica y privada
El comado para crear una llave privada y publica es el siguiente:
ssh-keygen -t rsa -b 4096
ssh-keygen -t rsa -b 4096 -C "enrique89_02@hotmail.com"
La frace es "AbelCasas" ojo
se debe poner a correr el process id con el siguiente comando eval $(ssh-agent -s) nos va a dar un numero asi (agent pid 2074)
---------------------------------------------------------------------------------------------------------------------------------------------
* CREACION DE TAG EN FLUJO DE TRABAJO

git log --all --graph --decorate --oneline: muestra el flujo de trabajos organizado con todos los commmit y las branches
alias arbolito="git log --all --graph --decorate --oneline"= genera una variable llamada arbolito que ejecuta el comando entre comillas
Gitk: muestra el mismo grafico pero en consola
git tag: muestra los tag que tengo en el proyecto
git show-ref --tags: muestra el hash o direccion de commit donde se hizo el tag
	1) Se copia el hashs
	2) git tag -a v0.1 -m"texto descripcion del tag"
	3)git push origin --tags: hace un push a los tags
Para eliminar un tag en consola de git se hace lo siguiente 

	1)git tag -d "tag que quiero eliminar(v0.1)"
para eliminarlo en github
	2)git push origin :refs/tags/v0.1
-------------------------------------------------------------------------------------------------------------------------------------------------------------



